// Generated by CoffeeScript 1.7.1
(function() {
  var app, evolution, gameId, http, io, socketData;

  app = require("express")();

  http = require("http").Server(app);

  io = require('socket.io')(http);

  evolution = require('./evolutionController.js')(io);

  gameId = 0;

  socketData = {};

  app.get("/", function(req, res) {
    res.send({
      connected: true
    });
  });

  io.on("connection", function(socket) {
    var fakeTurn;
    console.log("a user connected");
    fakeTurn = function(game) {
      var action;
      if (game.currentPlayerId !== socketsocketData[socket.id].playerId) {
        game = socketData[socket.id].game;
        action = {};
        action.previousPlayerId = game.currentPlayerId;
        evolution.nextPlayer(game);
        action.currentPlayerId = game.currentPlayerId;
        setTimeout(function() {
          socket.emit("player passed", action);
          fakeTurn(game);
        }, 5000);
      }
    };
    socket.join(socket.room);
    socket.on('disconnect', function() {
      var _ref, _ref1;
      console.log("disconnect");
      if ((((_ref = socketData[socket.id]) != null ? _ref.gameId : void 0) != null) && (((_ref1 = socketData[socket.id]) != null ? _ref1.playerId : void 0) != null)) {
        console.log("disconnected: player: " + socketData[socket.id].playerId + ", game: " + socketData[socket.id].gameId);
        evolution.games[socketData[socket.id].gameId].players[socketData[socket.id].playerId].connected = false;
      }
      if (socketData[socket.id] != null) {
        delete socketData[socket.id];
      }
    });
    socket.on("pass turn", function(action) {
      var game;
      game = socketData[socket.id].game;
      action.previousPlayerId = game.currentPlayerId;
      evolution.nextPlayer(game);
      action.currentPlayerId = game.currentPlayerId;
      socket.emit("player passed", action);
    });
    socket.on("end turn", function(action) {
      var game, player;
      console.log("end turn: " + action);
      if (evolution.areCompatible(action.card, action.specie)) {
        game = socketData[socket.id].game;
        action.previousPlayerId = game.currentPlayerId;
        player = game.players[action.previousPlayerId];
        action.card = player.hand[action.cardId];
        player.hand.splice(action.cardId, 1);
        player.species[action.specieId].push(action.card);
        evolution.nextPlayer(game);
        action.currentPlayerId = game.currentPlayerId;
        socket.to(socketData[socket.id].room).emit("next player", action);
        socket.emit("next player", action);
      } else {
        socket.emit("evolution error", action);
      }
    });
    socket.on("load game", function(data) {
      var game, playerId, _ref, _ref1;
      socketData[socket.id] = {};
      if ((data.gameId != null) && (data.playerId != null) && !((_ref = evolution.games[data.gameId]) != null ? (_ref1 = _ref.players[data.playerId]) != null ? _ref1.connected : void 0 : void 0)) {
        console.log("player existed");
        evolution.games[data.gameId].players[data.playerId].connected = true;
        socketData[socket.id].playerId = data.playerId;
        socketData[socket.id].gameId = data.gameId;
        socketData[socket.id].room = "game" + data.gameId;
      } else if (!((data.gameId != null) && (data.playerId != null))) {
        console.log("player did not exist");
        playerId = evolution.getNewPlayerId(gameId);
        socketData[socket.id].playerId = playerId;
        socketData[socket.id].gameId = gameId;
        evolution.games[gameId].players[playerId].connected = true;
        socketData[socket.id].room = "game" + gameId;
      } else {
        console.log("Error: player existed and was connected");
        socket.emit("game error", "A player is already connected on game " + data.gameId + " with the id " + data.playerId + ".");
        return;
      }
      console.log("load game " + data.gameId + " for player: " + data.playerId);
      socketData[socket.id].game = evolution.games[socketData[socket.id].gameId];
      game = evolution.filterGame(socketData[socket.id].game, socketData[socket.id].playerId);
      socket.emit("game loaded", {
        playerId: socketData[socket.id].playerId,
        gameId: socketData[socket.id].gameId,
        game: game
      });
    });
  });

  http.listen(3000, function() {
    console.log("listening on *:3000");
  });

}).call(this);

//# sourceMappingURL=index.map
