// Generated by CoffeeScript 1.7.1
(function() {
  var EvolutionCommons,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EvolutionCommons = (function() {
    function EvolutionCommons(game) {
      this.game = game;
      this.phases = ["Evolution", "Food"];
      this.cards = [
        {
          number: 8,
          traits: ['swimming']
        }, {
          number: 2,
          traits: ['swimming', 'ambushHunting']
        }, {
          number: 2,
          traits: ['swimming', 'vivaporous']
        }, {
          number: 4,
          traits: ['carnivorous', 'poisonous']
        }, {
          number: 4,
          traits: ['carnivorous', 'parasite']
        }, {
          number: 2,
          traits: ['carnivorous', 'metamorphosis']
        }, {
          number: 2,
          traits: ['carnivorous', 'flight']
        }, {
          number: 4,
          traits: ['carnivorous', 'communication']
        }, {
          number: 4,
          traits: ['carnivorous', 'highBodyWeight']
        }, {
          number: 4,
          traits: ['carnivorous', 'cooperation']
        }, {
          number: 4,
          traits: ['anglerFish']
        }, {
          number: 4,
          traits: ['carnivorous', 'hibernationAbility']
        }, {
          number: 2,
          traits: ['fatTissue', 'trematode']
        }, {
          number: 4,
          traits: ['fatTissue', 'camouflage']
        }, {
          number: 4,
          traits: ['fatTissue', 'parasite']
        }, {
          number: 4,
          traits: ['fatTissue', 'cooperation']
        }, {
          number: 4,
          traits: ['fatTissue', 'burrowing']
        }, {
          number: 2,
          traits: ['fatTissue', 'intellect']
        }, {
          number: 4,
          traits: ['fatTissue', 'highBodyWeight']
        }, {
          number: 4,
          traits: ['fatTissue', 'sharpVision']
        }, {
          number: 4,
          traits: ['fatTissue', 'grazing']
        }, {
          number: 2,
          traits: ['specializationA', 'flight']
        }, {
          number: 2,
          traits: ['specializationA', 'metamorphosis']
        }, {
          number: 2,
          traits: ['specializationA', 'intellect']
        }, {
          number: 2,
          traits: ['specializationB', 'flight']
        }, {
          number: 2,
          traits: ['specializationB', 'vivaporous']
        }, {
          number: 2,
          traits: ['specializationB', 'ambushHunting']
        }, {
          number: 4,
          traits: ['shell']
        }, {
          number: 4,
          traits: ['inkCloud']
        }, {
          number: 4,
          traits: ['scavenger']
        }, {
          number: 4,
          traits: ['piracy']
        }, {
          number: 4,
          traits: ['running']
        }, {
          number: 4,
          traits: ['tailLoss']
        }, {
          number: 4,
          traits: ['mimicry']
        }, {
          number: 4,
          traits: ['symbiosis']
        }, {
          number: 4,
          traits: ['trematode', 'cooperation']
        }, {
          number: 4,
          traits: ['trematode', 'communication']
        }
      ];
      this.traits = {
        swimming: {
          canBeEatenBy: function(specie) {
            return specie.traits.swimming != null;
          }
        },
        running: {
          attackSuccesful: function(specie) {
            return Math.random() > 0.5;
          }
        },
        mimicry: {},
        scavenger: {},
        symbiosis: {},
        piracy: {},
        tailLoss: {},
        communication: {},
        grazing: {},
        highBodyWeight: {},
        hibernationAbility: {},
        poisonous: {},
        cooperation: {},
        burrowing: {},
        camouflage: {},
        sharpVision: {},
        carnivorous: {},
        fatTissue: {},
        parasite: {},
        shell: {},
        intellect: {},
        anglerFish: {},
        specializationA: {},
        specializationB: {},
        trematode: {},
        metamorphosis: {},
        inkCloud: {},
        vivaporous: {},
        ambushHunting: {},
        flight: {}
      };
      return;
    }

    EvolutionCommons.prototype.isPlayerTurn = function(playerId) {
      return this.currentPlayerId() === playerId;
    };

    EvolutionCommons.prototype.currentPlayer = function() {
      return this.game.players[this.currentPlayerId()];
    };

    EvolutionCommons.prototype.player = function(index) {
      return this.game.players[index];
    };

    EvolutionCommons.prototype.currentPlayerId = function() {
      return this.game.currentPlayerId;
    };

    EvolutionCommons.prototype.foodAmountRequired = function(specie) {
      var cost, expensiveTraits, trait, _i, _len, _ref, _ref1;
      expensiveTraits = ['carnivorous', 'high-body-weight', 'parasite', 'trematode', 'vivaporous'];
      cost = 1;
      _ref = specie.traits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        if (_ref1 = trait.shortName, __indexOf.call(expensiveTraits, _ref1) >= 0) {
          cost += 1;
        }
        if (trait.shortName === 'parasite') {
          cost += 1;
        }
      }
      return cost;
    };

    EvolutionCommons.prototype.isFed = function(specie) {
      return specie.foodEaten === this.foodAmountRequired(specie);
    };

    EvolutionCommons.prototype.checkCompatibleEvolution = function(specie, card, addSpecie) {
      specie.compatible = true;
    };

    EvolutionCommons.prototype.checkCompatibleFood = function(specie) {
      var finished, specieFed, trait, _i, _len, _ref;
      specieFed = this.isFed(specie);
      if (!specieFed && this.game.foodAmount > 0) {
        specie.compatible = true;
      } else {
        specie.compatible = false;
      }
      finished = specieFed || this.game.foodAmount === 0;
      _ref = specie.traits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        trait.compatible = false;
        if (trait.shortName === 'grazing' && !trait.used) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'carnivorous' && !trait.used && !this.isFed(specie)) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'fatTissue' && !trait.used && this.isFed(specie)) {
          trait.compatible = true;
          break;
        }
        finished = finished && !trait.compatible;
      }
      specie.finished = finished;
    };

    EvolutionCommons.prototype.checkPlayerFinishedFood = function() {
      var player, specie, _i, _len, _ref;
      player = this.currentPlayer();
      _ref = player.species;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        if (!specie.finished) {
          return;
        }
      }
      player.finished = true;
    };

    EvolutionCommons.prototype.canPassFood = function() {
      var player, specie, _i, _len, _ref;
      player = this.currentPlayer();
      if (player.finished) {
        return false;
      }
      if (this.game.foodAmount === 0) {
        return true;
      }
      _ref = player.species;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        if (!this.isFed(specie)) {
          return false;
        }
      }
      return true;
    };

    EvolutionCommons.prototype.card = function(cardIndex) {
      return this.currentPlayer().hand[cardIndex];
    };

    EvolutionCommons.prototype.specie = function(specieIndex, playerId) {
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      return this.player(playerId).species[specieIndex];
    };

    EvolutionCommons.prototype.feedSpecie = function(specieIndex, playerId) {
      var specie;
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      specie = this.specie(specieIndex, playerId);
      specie.foodEaten++;
      this.game.foodAmount--;
      this.checkCompatibleFood(specie);
      this.checkPlayerFinishedFood();
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.createSpecie = function(player) {
      if (player == null) {
        player = this.currentPlayer();
      }
      player.species.push({
        traits: [],
        foodEaten: 0
      });
    };

    EvolutionCommons.prototype.addSpecie = function(cardIndex) {
      var card, player;
      player = this.currentPlayer();
      card = player.hand.splice(cardIndex, 1)[0];
      this.createSpecie(player);
      if (player.hand.length === 0) {
        player.finished = true;
      }
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.addTrait = function(specieIndex, cardIndex) {
      var card, player;
      player = this.currentPlayer();
      card = player.hand.splice(cardIndex, 1)[0];
      if (player.hand.length === 0) {
        player.finished = true;
      }
      this.specie(specieIndex).traits.push(card);
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.playerPassedEvolution = function() {
      var player;
      player = this.currentPlayer();
      player.finished = true;
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.playerPassedFood = function() {
      var player;
      player = this.currentPlayer();
      player.finished = true;
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.nextPlayer = function() {
      var i, players;
      i = 0;
      players = this.game.players;
      while (i < players.length) {
        this.game.currentPlayerId = (this.game.currentPlayerId + 1) % players.length;
        if (!this.player(this.game.currentPlayerId).finished) {
          break;
        }
        i++;
      }
      console.log(this.game.currentPlayerId);
      if (i === players.length) {
        this.game.currentPlayerId = this.game.firstPlayerId;
        this.nextPhase();
        return true;
      }
      return false;
    };

    EvolutionCommons.prototype.phase = function() {
      return this.phases[this.game.phaseIndex];
    };

    EvolutionCommons.prototype.extinctSpecies = function() {
      var player, specie, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        _ref1 = player.species;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          specie = _ref1[_j];
          if (!this.isFed(specie)) {
            specie.extinct = true;
          }
        }
      }
      this.phaseIndex = 0;
    };

    EvolutionCommons.prototype.clearExtinctedSpecies = function() {
      var i, player, specie, _i, _len, _ref;
      _ref = this.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        i = player.species.length - 1;
        while (i >= 0) {
          specie = player.species[i];
          if (specie.extinct) {
            player.species.splice(i, 1);
          }
          i--;
        }
      }
    };

    EvolutionCommons.prototype.nextPhase = function() {
      var player, _i, _len, _ref;
      this.game.phaseIndex = (this.game.phaseIndex + 1) % this.phases.length;
      _ref = this.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.finished = false;
      }
      switch (this.phase()) {
        case "Evolution":
          this.extinctSpecies();
          this.game.foodAmount = null;
          this.game.firstPlayerId = (this.game.firstPlayerId + 1) % this.game.players.length;
          this.game.currentPlayerId = this.game.firstPlayerId;
      }
    };

    return EvolutionCommons;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EvolutionCommons;
  }

  if (typeof angular !== "undefined" && angular !== null) {
    angular.module("EvolutionCommonsService", []).service("EvolutionCommons", function() {
      return this.EvolutionCommons = EvolutionCommons;
    });
  }

}).call(this);

//# sourceMappingURL=EvolutionCommons.map
