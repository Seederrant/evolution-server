// Generated by CoffeeScript 1.7.1
(function() {
  var EvolutionCommons;

  EvolutionCommons = (function() {
    function EvolutionCommons(game) {
      this.game = game;
      this.phases = {
        "Evolution": 0,
        "Food": 1,
        "Extinction": 2
      };
      return;
    }

    EvolutionCommons.prototype.isPlayerTurn = function(playerId) {
      return this.currentPlayerId() === playerId;
    };

    EvolutionCommons.prototype.currentPlayer = function() {
      return this.game.players[this.currentPlayerId()];
    };

    EvolutionCommons.prototype.player = function(index) {
      return this.players()[index];
    };

    EvolutionCommons.prototype.currentPlayerId = function() {
      return this.game.currentPlayerId;
    };

    EvolutionCommons.prototype.isFed = function(specie) {
      return specie.foodEaten === this.foodAmountRequired(specie);
    };

    EvolutionCommons.prototype.players = function() {
      return this.game.players;
    };

    EvolutionCommons.prototype.isCompatibleEvolution = function(specie, card) {
      return true;
    };

    EvolutionCommons.prototype.checkCompatibleFood = function(specie) {
      var fullyFed, trait, _i, _len, _ref;
      if (!isFed(specie)) {
        specie.compatible = true;
      }
      fullyFed = false;
      _ref = specie.traits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        if (trait.shortName === 'grazing' && !trait.used) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'carnivorous' && !trait.used && !isFed(specie)) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'fatTissue' && !trait.used && isFed(specie)) {
          trait.compatible = true;
          break;
        }
        fullyFed = fullyFed || !trait.compatible;
      }
      specie.fullyFed = fullyFed;
    };

    EvolutionCommons.prototype.card = function(cardIndex) {
      return this.currentPlayer().hand[cardIndex];
    };

    EvolutionCommons.prototype.specie = function(specieIndex, playerId) {
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      return this.player(playerId).species[specieIndex];
    };

    EvolutionCommons.prototype.feedSpecie = function(specieIndex, playerId) {
      var specie;
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      specie = this.specie(specieIndex, playerId);
      specie.foodEaten++;
      this.game.foodAmount--;
      this.checkCompatibleFood(specie);
    };

    EvolutionCommons.prototype.addTrait = function(specieIndex, cardIndex) {
      var card, player;
      player = this.currentPlayer();
      card = player.hand.splice(cardIndex, 1)[0];
      if (player.hand.length === 0) {
        player.finished = true;
      }
      this.specie(specieIndex).traits.push(card);
    };

    EvolutionCommons.prototype.passPlayerEvolution = function() {
      $scope.players[data.previousPlayerId].finished = true;
      next;
    };

    EvolutionCommons.prototype.nextPlayer = function() {
      var i;
      i = 0;
      while (true) {
        this.game.currentPlayerId = (++this.game.currentPlayerId) % this.game.players.length;
        i++;
        if (!(!this.player(this.game.currentPlayerId).finished && i === this.players.length)) {
          break;
        }
      }
      if (i === this.players.length) {
        nextPhase();
        return true;
      }
      return false;
    };

    EvolutionCommons.prototype.nextPhase = function() {
      var name, nextPhaseId, phaseId, player, _i, _len, _ref, _ref1;
      nextPhaseId = (this.phases[this.game.phase] + 1) % this.phases.length;
      _ref = this.phases;
      for (name in _ref) {
        phaseId = _ref[name];
        if (phaseId === nextPhaseId) {
          this.game.phase === name;
        }
      }
      _ref1 = this.game.players;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        player = _ref1[_i];
        player.finished = false;
      }
      if (this.game.phase === "Evolution") {
        this.game.firstPlayer = (++this.game.firstPlayer) % this.game.players.length;
        this.game.currentPlayerId = this.game.firstPlayer;
      }
    };

    return EvolutionCommons;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EvolutionCommons;
  }

  if (typeof angular !== "undefined" && angular !== null) {
    angular.module("EvolutionCommonsService", []).service("EvolutionCommons", function() {
      return this.EvolutionCommons = EvolutionCommons;
    });
  }

}).call(this);

//# sourceMappingURL=evolutionCommons.map
