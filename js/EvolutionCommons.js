// Generated by CoffeeScript 1.7.1
(function() {
  var EvolutionCommons,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EvolutionCommons = (function() {
    function EvolutionCommons(game) {
      this.game = game;
      this.phases = ["Evolution", "Food", "Extinction"];
      return;
    }

    EvolutionCommons.prototype.isPlayerTurn = function(playerId) {
      return this.currentPlayerId() === playerId;
    };

    EvolutionCommons.prototype.currentPlayer = function() {
      return this.game.players[this.currentPlayerId()];
    };

    EvolutionCommons.prototype.player = function(index) {
      return this.game.players[index];
    };

    EvolutionCommons.prototype.currentPlayerId = function() {
      return this.game.currentPlayerId;
    };

    EvolutionCommons.prototype.foodAmountRequired = function(specie) {
      var cost, expensiveTraits, trait, _i, _len, _ref, _ref1;
      expensiveTraits = ['carnivorous', 'high-body-weight', 'parasite', 'co-parasite', 'vivaporous'];
      cost = 1;
      _ref = specie.traits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        if (_ref1 = trait.shortName, __indexOf.call(expensiveTraits, _ref1) >= 0) {
          cost += 1;
        }
        if (trait.shortName === 'parasite') {
          cost += 1;
        }
      }
      return cost;
    };

    EvolutionCommons.prototype.isFed = function(specie) {
      return specie.foodEaten === this.foodAmountRequired(specie);
    };

    EvolutionCommons.prototype.checkCompatibleEvolution = function(specie, card) {
      return true;
    };

    EvolutionCommons.prototype.checkCompatibleFood = function(specie) {
      var finished, trait, _i, _len, _ref;
      if (!this.isFed(specie)) {
        specie.compatible = true;
      } else {
        specie.compatible = false;
      }
      finished = false;
      _ref = specie.traits;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        trait = _ref[_i];
        if (trait.shortName === 'grazing' && !trait.used) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'carnivorous' && !trait.used && !this.isFed(specie)) {
          trait.compatible = true;
          break;
        }
        if (trait.shortName === 'fatTissue' && !trait.used && this.isFed(specie)) {
          trait.compatible = true;
          break;
        }
        finished = finished || !trait.compatible;
      }
      specie.finished = finished;
    };

    EvolutionCommons.prototype.checkPlayerFinishedFood = function() {
      var player, specie, _i, _len, _ref;
      player = this.currentPlayer();
      _ref = player.species;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        if (!specie.finished) {
          return;
        }
      }
      player.finished = true;
    };

    EvolutionCommons.prototype.canPassFood = function() {
      var player, specie, _i, _len, _ref;
      player = this.currentPlayer();
      if (this.game.foodAmount === 0) {
        return true;
      }
      _ref = player.species;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specie = _ref[_i];
        if (!this.isFed(specie)) {
          return false;
        }
      }
      return true;
    };

    EvolutionCommons.prototype.card = function(cardIndex) {
      return this.currentPlayer().hand[cardIndex];
    };

    EvolutionCommons.prototype.specie = function(specieIndex, playerId) {
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      return this.player(playerId).species[specieIndex];
    };

    EvolutionCommons.prototype.feedSpecie = function(specieIndex, playerId) {
      var specie;
      if (playerId == null) {
        playerId = this.currentPlayerId();
      }
      specie = this.specie(specieIndex, playerId);
      specie.foodEaten++;
      this.game.foodAmount--;
      this.checkCompatibleFood(specie);
      this.checkPlayerFinishedFood();
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.addTrait = function(specieIndex, cardIndex) {
      var card, player;
      player = this.currentPlayer();
      card = player.hand.splice(cardIndex, 1)[0];
      if (player.hand.length === 0) {
        player.finished = true;
      }
      this.specie(specieIndex).traits.push(card);
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.playerPassedEvolution = function() {
      var player;
      player = this.currentPlayer();
      player.finished = true;
      return this.nextPlayer();
    };

    EvolutionCommons.prototype.nextPlayer = function() {
      var i, players;
      i = 0;
      players = this.game.players;
      while (i < players.length) {
        this.game.currentPlayerId = (this.game.currentPlayerId + 1) % players.length;
        if (!this.player(this.game.currentPlayerId).finished) {
          break;
        }
        i++;
      }
      console.log(this.game.currentPlayerId);
      if (i === players.length) {
        this.game.currentPlayerId = this.game.firstPlayerId;
        this.nextPhase();
        return true;
      }
      return false;
    };

    EvolutionCommons.prototype.phase = function() {
      return this.phases[this.game.phaseIndex];
    };

    EvolutionCommons.prototype.nextPhase = function() {
      var player, _i, _len, _ref;
      this.game.phaseIndex = (this.game.phaseIndex + 1) % this.phases.length;
      _ref = this.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        player.finished = false;
      }
      if (this.phase() === "Evolution") {
        this.game.firstPlayerId = (this.game.firstPlayerId + 1) % this.game.players.length;
        this.game.currentPlayerId = this.game.firstPlayerId;
      }
    };

    return EvolutionCommons;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EvolutionCommons;
  }

  if (typeof angular !== "undefined" && angular !== null) {
    angular.module("EvolutionCommonsService", []).service("EvolutionCommons", function() {
      return this.EvolutionCommons = EvolutionCommons;
    });
  }

}).call(this);

//# sourceMappingURL=EvolutionCommons.map
